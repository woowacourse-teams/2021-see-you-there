
plugins {
	id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'org.sonarqube' version '3.0'
	id 'jacoco'
}
sonarqube {
	properties {
		property "sonar.projectKey", "see-you-there"
	}
}

group = 'seeuthere'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
	finalizedBy 'jacocoTestReport'
}

repositories {
	mavenCentral()
}

dependencies {
	// spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation:2.3.3.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.projectreactor:reactor-spring:1.0.1.RELEASE'

	//jwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// webflux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// log
	implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

	implementation 'mysql:mysql-connector-java:8.0.22'
	implementation 'org.mariadb.jdbc:mariadb-java-client:2.1.2'
	implementation 'org.projectlombok:lombok:1.18.20'
	runtimeOnly 'com.h2database:h2'

	//JSONObject
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'

	//XMLObject
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.12.4'

	// data cache
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'


	// test
	testImplementation 'io.rest-assured:rest-assured:3.3.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// test
	implementation 'org.springframework.restdocs:spring-restdocs-restassured'
}

jacoco{
	toolVersion = "0.8.7"
}


jacocoTestReport{
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled true
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.0
			}

			excludes = []
		}
	}
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

asciidoctor.doFirst {
	delete file('src/main/resources/templates')
}

bootJar {
	dependsOn asciidoctor
	copy {
		from "${asciidoctor.outputDir}"
		into 'BOOT-INF/classes/static/docs'
	}
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/templates")
}

build {
	dependsOn copyDocument
}
